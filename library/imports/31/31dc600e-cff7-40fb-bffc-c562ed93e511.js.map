{"version":3,"sources":["../../../../../../assets/src/base/Interval/assets/src/base/Interval/Interval.ts"],"names":[],"mappings":";;;;;AAAM,IAAA,kBAAkC,EAAjC,oBAAO,EAAC,sBAAQ,CAAkB;AAGzC;IAAsC,4BAAY;IAAlD;;IAgDA,CAAC;IA9CG;;;;;;;;;;OAUG;IACU,+BAAY,GAAzB,UAA0B,QAAkB,EAAE,IAAY,EAAE,MAAkB,EAAE,KAAiB;QAArC,uBAAA,EAAA,UAAkB;QAAE,sBAAA,EAAA,SAAiB;uCAAG,OAAO;;;4BAChG,qBAAM,IAAI,CAAC,QAAQ,CAAC;4BACtB,QAAQ,CAAC;wBACd,CAAC,EAAC,IAAI,EAAC,MAAM,EAAC,KAAK,CAAC,EAAA;4BAFpB,sBAAO,SAEa,EAAA;;;;KACvB;IAED;;;;;;OAMG;IACU,gCAAa,GAA1B,UAA2B,QAAkB,EAAE,IAAY;uCAAG,OAAO;;;4BAC1D,qBAAM,IAAI,CAAC,YAAY,CAAC;4BAC3B,QAAQ,CAAA;wBACZ,CAAC,EAAE,IAAI,CAAC,EAAA;4BAFR,sBAAO,SAEC,EAAA;;;;KACX;IAED;;;;;;;OAOG;IACU,gCAAa,GAA1B,UAA2B,QAAyB,EAAE,IAAgB;QAA3C,yBAAA,EAAA,eAAyB;QAAE,qBAAA,EAAA,QAAgB;uCAAG,OAAO;;;;6BACzE,CAAA,IAAI,KAAK,CAAC,CAAA,EAAV,wBAAU;wBACH,qBAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAA;4BAAtC,sBAAO,SAA+B,EAAA;4BAE9B,qBAAM,IAAI,CAAC,sBAAsB,EAAE,EAAA;4BAA1C,sBAAO,SAAmC,EAAA;;;;KAGjD;IA/CgB,QAAQ;QAD5B,OAAO;OACa,QAAQ,CAgD5B;IAAD,eAAC;CAhDD,AAgDC,CAhDqC,EAAE,CAAC,SAAS,GAgDjD;kBAhDoB,QAAQ","file":"","sourceRoot":"../../../../../../assets/src/base/Interval","sourcesContent":["const {ccclass,property} = cc._decorator;\n\n@ccclass\nexport default class Interval extends cc.Component{\n\n    /**\n     * 定时器\n     * @param callback 执行的回调函数\n     * @param wait     等待时间\n     * @param repeat   重复次数\n     * @param delay    延迟时间\n     * @param clear    清楚定时器条件\n     * @example\n     *      this.initInterval(this.interval,1); // 执行一个一秒的定时器\n     *      this.initInterval(this.interval,1,1,1); // 执行一个一秒的定时器,重复1次,延迟1秒的定时器\n     */\n    public async initInterval(callback: Function, wait: number, repeat: number = 1, delay: number = 0): Promise<any> {\n        return await this.schedule(()=>{\n             callback;\n        },wait,repeat,delay)\n    }\n\n    /**\n     * \n     * @param callback 执行的回调函数\n     * @param wait     执行时间\n     * @example\n     *    this.oneceInterval(this.interval,1)\n     */\n    public async oneceInterval(callback: Function, wait: number): Promise<any> {\n        return await this.scheduleOnce(()=>{\n            callback\n        }, wait)\n    }\n    \n    /**\n     * 清楚定时器\n     * @param callback 清楚的回调函数\n     * @param type     类型 1: 清楚当前定时器 其他:清除所有 默认为清除当前\n     * @example\n     *     this.clearInterval(this.interval,1) // 清除当前定时器\n     *     this.clearInterval(-1) //清除所有\n     */\n    public async clearInterval(callback: Function = null, type: number = 1): Promise<any> {\n        if(type === 1) {\n           return await this.unschedule(callback)\n        }else {\n            return await this.unscheduleAllCallbacks()\n        }\n        \n    }\n}"]}