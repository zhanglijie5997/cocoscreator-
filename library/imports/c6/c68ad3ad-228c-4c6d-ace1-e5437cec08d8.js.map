{"version":3,"sources":["../../../../../../assets/src/base/EventBus/assets/src/base/EventBus/EventBus.ts"],"names":[],"mappings":";;;;;AAAA;IAEI;QADQ,WAAM,GAAQ,IAAI,CAAC;QAEvB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,MAAM,EAAE,CAAC;IAC9C,CAAC;IACM,wBAAK,GAAZ,UAAa,IAAW;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QAC7B,IAAI,CAAC,CAAC;QACN,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtB,sCAAsC;QACtC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/B,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;gBACnB,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC1B;SACJ;aAAM;YACH,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC1B;IACL,CAAC;IAEM,sBAAG,GAAV,UAAW,IAAW,EAAE,GAAG;QACvB,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAG5B,IAAI,CAAC,CAAC,EAAE,EAAI,8BAA8B;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAE7B;aAAM,EAAG,aAAa;YACnB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACf;IACL,CAAC;IAEM,uBAAI,GAAX,UAAY,IAAW,EAAC,GAAG;QACxB,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3B,EAAE,CAAC,GAAG,CAAC,GAAG,EAAC,KAAK,CAAC,CAAA;QAClB,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnC,IAAI,MAAM,CAAC;QACX,KAAI,IAAI,CAAC,GAAE,CAAC,EAAC,CAAC,GAAG,GAAG,CAAC,MAAM,EAAC,CAAC,EAAE,EAAE;YAC7B,IAAG,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;gBAClB,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,MAAM,CAAC,CAAC;gBACtB,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;aACjB;SACJ;QACD,OAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;IAC9B,CAAC;IAEL,eAAC;AAAD,CA7CA,AA6CC,IAAA;AAED,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;AAEhC,kBAAe,QAAQ,CAAC","file":"","sourceRoot":"../../../../../../assets/src/base/EventBus","sourcesContent":["class EventBus {\r\n    private events: any = null;\r\n    constructor() {\r\n        this.events = this.events || new Object();\r\n    }\r\n    public $emit(type:string, ...args): void {\r\n        let e;\r\n        e = this.events[type];\r\n        // 查看这个type的event有多少个回调函数，如果有多个需要依次调用。\r\n        if (Array.isArray(e)) {\r\n            for (let i = 0; i < e.length; i++) {\r\n                cc.log(e[i], 'hhh')\r\n                e[i].apply(this, args);\r\n            }\r\n        } else {\r\n            e[0].apply(this, args);\r\n        }\r\n    }\r\n\r\n    public $on(type:string, fun) {\r\n        const e = this.events[type];\r\n        \r\n\r\n        if (!e) {   //如果从未注册过监听函数，则将函数放入数组存入对应的键名下\r\n            this.events[type] = [fun];\r\n          \r\n        } else {  //如果注册过，则直接放入\r\n            e.push(fun);\r\n        }\r\n    }\r\n\r\n    public $off(type:string,fun) {\r\n       const e = this.events[type];\r\n        cc.log(fun,'fun')\r\n       let KEY = Object.keys(this.events);\r\n       var slice1;\r\n       for(var i =0;i < KEY.length;i++) {\r\n           if(KEY[i] === type) {\r\n             cc.log(KEY[i],'5555');\r\n             slice1 = KEY[i];\r\n           }\r\n       }\r\n       delete(this.events[slice1])\r\n    }\r\n\r\n}\r\n\r\nconst eventBus = new EventBus();\r\n\r\nexport default eventBus;"]}