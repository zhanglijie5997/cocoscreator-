{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\scripts\\map\\collision/assets\\scripts\\map\\collision\\bulletsCollision.ts"],"names":[],"mappings":";;;;;AAAA,oDAA+C;AAC/C,gEAA2D;AAC3D,qDAAgD;AAE1C,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAAQ,CAAmB;AAG5C;IAA8C,oCAAI;IADlD;QAAA,qEA6GC;QA1GG,OAAO;QAEP,YAAM,GAAc,IAAI,CAAC;QAEzB,IAAI;QAEJ,YAAM,GAAc,IAAI,CAAC;QAEzB,UAAI,GAAU,EAAE,CAAC;QAEjB,qBAAe,GAAoB,IAAI,yBAAe,EAAE,CAAC;;IAgG7D,CAAC;IA9FG,iCAAM,GAAN;QACI,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;QACjD,6DAA6D;QAC7D,mEAAmE;QACnE,wCAAwC;IAC5C,CAAC;IAEO,yCAAc,GAAtB;QACI,kBAAQ,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;IAC1D,CAAC;IAEO,qCAAU,GAAlB,UAAmB,GAAW;QAC1B,cAAc;QACd,kBAAkB;IACtB,CAAC;IAEK,2CAAgB,GAAtB,UAAuB,KAAU,EAAE,IAAS;uCAAG,OAAO;;;;;;6BAQ9C,KAAK,EAAL,wBAAK;wBAEL,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;wBAGjB,SAAO,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAEvC,MAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;wBAEpB,CAAC,SAAA,EAAE,CAAC,SAAA,CAAC;wBAET,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;4BAEnB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BAExB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;yBAE3B;wBAID,yCAAyC;wBAEzC,qBAAM,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,MAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,EAAE,MAAI,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,EAAE,MAAI,CAAC,EAAA;;wBAF7G,yCAAyC;wBAEzC,SAA6G,CAAC;wBAE9G,IAAI,CAAC,YAAY,CAAC;4BAEd,MAAI,CAAC,OAAO,EAAE,CAAC;wBAEnB,CAAC,EAAE,CAAC,CAAC,CAAA;wBAEL,IAAI,CAAC,QAAQ,CAAC;4BACV,KAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;4BACnC,cAAc;wBAClB,CAAC,EAAE,CAAC,CAAC,CAAA;;;wBAEL,IAAI,CAAC,UAAU,CAAC;4BACZ,KAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;4BACnC,cAAc;wBAClB,CAAC,CAAC,CAAA;;;;;;KAeT;IAED,0CAAe,GAAf,UAAgB,KAAU,EAAE,IAAS;QACjC,oBAAoB;IACxB,CAAC;IACD,gCAAK,GAAL,cAAU,CAAC;IACX,iCAAM,GAAN,UAAO,EAAU;IAEjB,CAAC;IACD,oCAAS,GAAT;IAGA,CAAC;IApGD;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;oDACK;IAIzB;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;oDACK;IARR,gBAAgB;QADpC,OAAO;OACa,gBAAgB,CA4GpC;IAAD,uBAAC;CA5GD,AA4GC,CA5G6C,cAAI,GA4GjD;kBA5GoB,gBAAgB","file":"","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\scripts\\map\\collision","sourcesContent":["import Move from \"../../../src/base/move/Move\";\r\nimport eventBus from \"../../../src/base/EventBus/EventBus\";\r\nimport peopleCollision from \"./peopleCollision\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class bulletsCollision extends Move {\r\n\r\n    // 创建子弹\r\n    @property(cc.Prefab)\r\n    bullet: cc.Prefab = null;\r\n\r\n    // 怪\r\n    @property(cc.Prefab)\r\n    people: cc.Prefab = null;\r\n\r\n    data: any[] = [];\r\n\r\n    peopleCollision: peopleCollision = new peopleCollision();\r\n\r\n    onLoad() {\r\n        cc.director.getCollisionManager().enabled = true;\r\n        // cc.director.getCollisionManager().enabledDebugDraw = true;\r\n        // cc.director.getCollisionManager().enabledDrawBoundingBox = true;\r\n        // cc.log(cc.find(\"Canvas\").children,55)\r\n    }\r\n\r\n    private _getPeopleSize(): void {\r\n        eventBus.$on(\"peopleSize\", this._peopleMsg.bind(this))\r\n    }\r\n\r\n    private _peopleMsg(msg: object) {\r\n        // cc.log(msg)\r\n        // this.x = msg.x;\r\n    }\r\n\r\n    async onCollisionEnter(other: any, self: any): Promise<any> {\r\n\r\n\r\n        // cc.log(other, '555555555')\r\n\r\n\r\n\r\n\r\n        if (other) {\r\n\r\n            this.data.push(other)\r\n            // let collision = \r\n\r\n            let temp = cc.instantiate(this.bullet);\r\n\r\n            temp.parent = this.node;\r\n\r\n            let x, y;\r\n\r\n            if (this.data[0].node) {\r\n                \r\n                x = this.data[0].node.x;\r\n\r\n                y = this.data[0].node.y;\r\n                \r\n            }\r\n\r\n\r\n\r\n            // cc.log(this.data[0].node, x, y, 55222)\r\n\r\n            await this._moveTo(1, temp.x + x + this.peopleCollision.x / 2, temp.y + y + this.peopleCollision.y / 2, temp);\r\n\r\n            this.scheduleOnce(() => {\r\n\r\n                temp.destroy();\r\n\r\n            }, 1)\r\n\r\n            this.schedule(() => {\r\n                this.onCollisionEnter(other, self);\r\n                // cc.log(111)\r\n            }, 1)\r\n        } else {\r\n            this.unschedule(() => {\r\n                this.onCollisionEnter(other, self);\r\n                // cc.log(111)\r\n            })\r\n        }\r\n\r\n\r\n        // cc.log(other,11)\r\n\r\n        // let move = cc.removeSelf();\r\n\r\n        // this.node.runAction(move)\r\n\r\n        // let x = this.node.x;\r\n\r\n        // let y = this.node.y;\r\n\r\n        // this._moveTo(1, x + 100, y - 100, this.node);\r\n    }\r\n\r\n    onCollisionExit(other: any, self: any) {\r\n        // cc.log(other,444)\r\n    }\r\n    start() { }\r\n    update(dt: number) {\r\n\r\n    }\r\n    onDestroy() {\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n"]}