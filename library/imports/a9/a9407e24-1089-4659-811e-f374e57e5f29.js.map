{"version":3,"sources":["../../../../../../assets/src/base/http/assets/src/base/http/HTTP.ts"],"names":[],"mappings":";;;;;AAAA;IAAA;IAoEA,CAAC;IAlEG;;OAEG;IACK,sBAAO,GAAf,UAAgB,YAAwB,EAAE,IAAmB;QAAnB,qBAAA,EAAA,WAAmB;QACzD,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,YAAY,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC3C,UAAU,CAAC;gBACP,KAAK,GAAG;oBACJ,OAAO,MAAM,CAAC;wBACV,IAAI,EAAE,GAAG;wBACT,OAAO,EAAE,OAAO;qBACnB,CAAC,CAAC;gBACP,CAAC,CAAC;YACN,CAAC,EAAE,IAAI,CAAC,CAAA;QAEZ,CAAC,CAAC,CAAC;QAGH,qBAAqB;QACrB,IAAI,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC;QAE/D,OAAO,aAAa,CAAC,IAAI,CAAC,UAAA,GAAG;YACzB,+CAA+C;YAC/C,OAAO,GAAG,CAAC;QACf,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACK,oBAAK,GAAb,UAAc,GAAW,EAAE,IAAoB,EAAE,EAAW;QAAjC,qBAAA,EAAA,YAAoB;YAAI,qBAAO;QACtD;;WAEG;QACH,IAAI,GAAG,GAAG,4BAA4B,CAAA;QACtC,IAAI,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC9B,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,GAAG,GAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;QAGD,OAAO,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE;YACpB,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,QAAQ;SACjB,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAA;IAE9B,CAAC;IAED;;;;;OAKG;IACI,mBAAI,GAAX,UAAY,GAAW,EAAE,IAAY,EAAE,EAAW;YAAT,qBAAO;QAG5C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,eACjC,IAAI,EACT,CAAC,CAAA;IAEP,CAAC;IAjEM,aAAQ,GAAS,IAAI,IAAI,EAAE,CAAC;IAmEvC,WAAC;CApED,AAoEC,IAAA;AACD,kBAAe,IAAI,CAAC,QAAQ,CAAC","file":"","sourceRoot":"../../../../../../assets/src/base/http","sourcesContent":["class HTTP {\r\n    static instance: HTTP = new HTTP();\r\n    /**\r\n     * 超时处理\r\n     */\r\n    private TimeOut(fecthPromise: () => void, time: number = 5000): object {\r\n        let abort = null;\r\n        let abortPromise = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                abort = () => {\r\n                    return reject({\r\n                        code: 504,\r\n                        message: \"请求超时！\"\r\n                    });\r\n                };\r\n            }, time)\r\n\r\n        });\r\n\r\n\r\n        // 最快出结果的promise 作为结果\r\n        let resultPromise = Promise.race([fecthPromise, abortPromise]);\r\n\r\n        return resultPromise.then(res => {\r\n            // console.log(res, '_______________________');\r\n            return res;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * fetch 请求\r\n     */\r\n    private Fetch(url: string, type: string = \"GET\", { ...data }): any {\r\n        /**\r\n         * data 数据 处理\r\n         */\r\n        let Url = 'http://localhost:8091/api/'\r\n        let formData = new FormData();\r\n        let KEY = Object.keys(data);\r\n        let VAL = <any>Object.values(data);\r\n\r\n        for (var i = 0; i < KEY.length; i++) {\r\n            formData.append(KEY[i], VAL[i]);\r\n        }\r\n\r\n\r\n        return fetch(Url + url, {\r\n            method: type,\r\n            body: formData\r\n        }).then(res => res.json())\r\n\r\n    }\r\n\r\n    /**\r\n     * 网络请求调用此接口\r\n     * @param url      地址\r\n     * @param type     类型\r\n     * @param param2   数据\r\n     */\r\n    public Ajax(url: string, type: string, { ...data }): any {\r\n\r\n\r\n        return this.TimeOut(this.Fetch(url, type, {\r\n            ...data\r\n        }))\r\n\r\n    }\r\n\r\n}\r\nexport default HTTP.instance;"]}